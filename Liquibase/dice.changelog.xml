<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:pro="http://www.liquibase.org/xml/ns/pro"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.4.xsd
    http://www.liquibase.org/xml/ns/pro http://www.liquibase.org/xml/ns/pro/liquibase-pro-4.4.xsd ">

    <changeSet id="1" author="your.name">
        <createTable tableName="DiceRoles">
            <column name="Id" type="string">
                <constraints primaryKey="true"/>
            </column>
            <column name="Name" type="varchar(256)">
                <constraints nullable="true"/>
            </column>
            <column name="ConcurrencyStamp" type="varchar(256)">
                <constraints nullable="true"/>
            </column>
        </createTable>
        <createTable tableName="DiceUsers">
            <column name="Id" type="string">
                <constraints primaryKey="true"/>
            </column>
            <column name="UserName" type="varchar(256)">
                <constraints nullable="false"/>
            </column>
            <column name="Email" type="varchar(256)">
                <constraints nullable="false"/>
            </column>
            <column name="EmailConfirmed" type="boolean">
                <constraints nullable="false"/>
            </column>
            <column name="PasswordHash" type="varchar(256)">
                <constraints nullable="false"/>
            </column>
            <column name="SecurityStamp" type="varchar(256)">
                <constraints nullable="true"/>
            </column>
            <column name="ConcurrencyStamp" type="varchar(256)">
                <constraints nullable="true"/>
            </column>
            <column name="PhoneNumber" type="varchar(256)">
                <constraints nullable="true"/>
            </column>
            <column name="PhoneNumberConfirmed" type="boolean">
                <constraints nullable="false"/>
            </column>
            <column name="TwoFactorEnabled" type="varchar(256)">
                <constraints nullable="false"/>
            </column>
            <column name="TwoFactorEnabled" type="varchar(256)">
                <constraints nullable="false"/>
            </column>
            <column name="LockoutEnd" type="datetime">
                <constraints nullable="true"/>
            </column>
            <column name="LockoutEnabled" type="boolean">
                <constraints nullable="true"/>
            </column>

        </createTable>
    </changeSet>
    
    LockoutEnd = table.Column<DateTimeOffset>(nullable: true),
    LockoutEnabled = table.Column<bool>(nullable: false),
    AccessFailedCount = table.Column<int>(nullable: false)
    },
    constraints: table => { table.PrimaryKey("PK_AspNetUsers", x => x.Id); });

    migrationBuilder.CreateTable(
    name: "DeviceCodes",
    columns: table => new
    {
    UserCode = table.Column<string>(maxLength: 200, nullable: false),
    DeviceCode = table.Column<string>(maxLength: 200, nullable: false),
    SubjectId = table.Column<string>(maxLength: 200, nullable: true),
    ClientId = table.Column<string>(maxLength: 200, nullable: false),
    CreationTime = table.Column<DateTime>(nullable: false),
    Expiration = table.Column<DateTime>(nullable: false),
    Data = table.Column<string>(maxLength: 50000, nullable: false)
    },
    constraints: table => { table.PrimaryKey("PK_DeviceCodes", x => x.UserCode); });

    migrationBuilder.CreateTable(
    name: "PersistedGrants",
    columns: table => new
    {
    Key = table.Column<string>(maxLength: 200, nullable: false),
    Type = table.Column<string>(maxLength: 50, nullable: false),
    SubjectId = table.Column<string>(maxLength: 200, nullable: true),
    ClientId = table.Column<string>(maxLength: 200, nullable: false),
    CreationTime = table.Column<DateTime>(nullable: false),
    Expiration = table.Column<DateTime>(nullable: true),
    Data = table.Column<string>(maxLength: 50000, nullable: false)
    },
    constraints: table => { table.PrimaryKey("PK_PersistedGrants", x => x.Key); });

    migrationBuilder.CreateTable(
    name: "AspNetRoleClaims",
    columns: table => new
    {
    Id = table.Column<int>(nullable: false)
    .Annotation("Sqlite:Autoincrement", true),
    RoleId = table.Column<string>(nullable: false),
    ClaimType = table.Column<string>(nullable: true),
    ClaimValue = table.Column<string>(nullable: true)
    },
    constraints: table =>
    {
    table.PrimaryKey("PK_AspNetRoleClaims", x => x.Id);
    table.ForeignKey(
    name: "FK_AspNetRoleClaims_AspNetRoles_RoleId",
    column: x => x.RoleId,
    principalTable: "AspNetRoles",
    principalColumn: "Id",
    onDelete: ReferentialAction.Cascade);
    });

    migrationBuilder.CreateTable(
    name: "AspNetUserClaims",
    columns: table => new
    {
    Id = table.Column<int>(nullable: false)
    .Annotation("Sqlite:Autoincrement", true),
    UserId = table.Column<string>(nullable: false),
    ClaimType = table.Column<string>(nullable: true),
    ClaimValue = table.Column<string>(nullable: true)
    },
    constraints: table =>
    {
    table.PrimaryKey("PK_AspNetUserClaims", x => x.Id);
    table.ForeignKey(
    name: "FK_AspNetUserClaims_AspNetUsers_UserId",
    column: x => x.UserId,
    principalTable: "AspNetUsers",
    principalColumn: "Id",
    onDelete: ReferentialAction.Cascade);
    });

    migrationBuilder.CreateTable(
    name: "AspNetUserLogins",
    columns: table => new
    {
    LoginProvider = table.Column<string>(maxLength: 128, nullable: false),
    ProviderKey = table.Column<string>(maxLength: 128, nullable: false),
    ProviderDisplayName = table.Column<string>(nullable: true),
    UserId = table.Column<string>(nullable: false)
    },
    constraints: table =>
    {
    table.PrimaryKey("PK_AspNetUserLogins", x => new { x.LoginProvider, x.ProviderKey });
    table.ForeignKey(
    name: "FK_AspNetUserLogins_AspNetUsers_UserId",
    column: x => x.UserId,
    principalTable: "AspNetUsers",
    principalColumn: "Id",
    onDelete: ReferentialAction.Cascade);
    });

    migrationBuilder.CreateTable(
    name: "AspNetUserRoles",
    columns: table => new
    {
    UserId = table.Column<string>(nullable: false),
    RoleId = table.Column<string>(nullable: false)
    },
    constraints: table =>
    {
    table.PrimaryKey("PK_AspNetUserRoles", x => new { x.UserId, x.RoleId });
    table.ForeignKey(
    name: "FK_AspNetUserRoles_AspNetRoles_RoleId",
    column: x => x.RoleId,
    principalTable: "AspNetRoles",
    principalColumn: "Id",
    onDelete: ReferentialAction.Cascade);
    table.ForeignKey(
    name: "FK_AspNetUserRoles_AspNetUsers_UserId",
    column: x => x.UserId,
    principalTable: "AspNetUsers",
    principalColumn: "Id",
    onDelete: ReferentialAction.Cascade);
    });

    migrationBuilder.CreateTable(
    name: "AspNetUserTokens",
    columns: table => new
    {
    UserId = table.Column<string>(nullable: false),
    LoginProvider = table.Column<string>(maxLength: 128, nullable: false),
    Name = table.Column<string>(maxLength: 128, nullable: false),
    Value = table.Column<string>(nullable: true)
    },
    constraints: table =>
    {
    table.PrimaryKey("PK_AspNetUserTokens", x => new { x.UserId, x.LoginProvider, x.Name });
    table.ForeignKey(
    name: "FK_AspNetUserTokens_AspNetUsers_UserId",
    column: x => x.UserId,
    principalTable: "AspNetUsers",
    principalColumn: "Id",
    onDelete: ReferentialAction.Cascade);
    });

    migrationBuilder.CreateIndex(
    name: "IX_AspNetRoleClaims_RoleId",
    table: "AspNetRoleClaims",
    column: "RoleId");

    migrationBuilder.CreateIndex(
    name: "RoleNameIndex",
    table: "AspNetRoles",
    column: "NormalizedName",
    unique: true);

    migrationBuilder.CreateIndex(
    name: "IX_AspNetUserClaims_UserId",
    table: "AspNetUserClaims",
    column: "UserId");

    migrationBuilder.CreateIndex(
    name: "IX_AspNetUserLogins_UserId",
    table: "AspNetUserLogins",
    column: "UserId");

    migrationBuilder.CreateIndex(
    name: "IX_AspNetUserRoles_RoleId",
    table: "AspNetUserRoles",
    column: "RoleId");

    migrationBuilder.CreateIndex(
    name: "EmailIndex",
    table: "AspNetUsers",
    column: "NormalizedEmail");

    migrationBuilder.CreateIndex(
    name: "UserNameIndex",
    table: "AspNetUsers",
    column: "NormalizedUserName",
    unique: true);

    migrationBuilder.CreateIndex(
    name: "IX_DeviceCodes_DeviceCode",
    table: "DeviceCodes",
    column: "DeviceCode",
    unique: true);

    migrationBuilder.CreateIndex(
    name: "IX_DeviceCodes_Expiration",
    table: "DeviceCodes",
    column: "Expiration");

    migrationBuilder.CreateIndex(
    name: "IX_PersistedGrants_Expiration",
    table: "PersistedGrants",
    column: "Expiration");

    migrationBuilder.CreateIndex(
    name: "IX_PersistedGrants_SubjectId_ClientId_Type",
    table: "PersistedGrants",
    columns: new[] { "SubjectId", "ClientId", "Type" });
    }

    protected override void Down(MigrationBuilder migrationBuilder)
    {
    migrationBuilder.DropTable(
    name: "AspNetRoleClaims");

    migrationBuilder.DropTable(
    name: "AspNetUserClaims");

    migrationBuilder.DropTable(
    name: "AspNetUserLogins");

    migrationBuilder.DropTable(
    name: "AspNetUserRoles");

    migrationBuilder.DropTable(
    name: "AspNetUserTokens");

    migrationBuilder.DropTable(
    name: "DeviceCodes");

    migrationBuilder.DropTable(
    name: "PersistedGrants");

    migrationBuilder.DropTable(
    name: "AspNetRoles");

    migrationBuilder.DropTable(
    name: "AspNetUsers");
    }
    }
    }
    <changeSet id="2" author="your.name">
        <createTable tableName="company">
            <column name="id" type="int">
                <constraints primaryKey="true"/>
            </column>
            <column name="name" type="varchar(50)">
                <constraints nullable="false"/>
            </column>
            <column name="address1" type="varchar(50)"/>
            <column name="address2" type="varchar(50)"/>
            <column name="city" type="varchar(30)"/>
        </createTable>
    </changeSet>

    <changeSet id="3" author="other.dev">
        <addColumn tableName="person">
            <column name="country" type="varchar(2)"/>
        </addColumn>
    </changeSet>
</databaseChangeLog>
